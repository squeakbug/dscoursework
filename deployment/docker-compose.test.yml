---

services:
  gateway-service:
    build: 
      context: ../
      dockerfile: ./deployment/gateway_service/Dockerfile
    image: squeakbug73/gateway-service:0.4
    restart: unless-stopped
    container_name: gateway-service
    environment:
      GATEWAY_SERVICE__LISTEN_PORT: ${GATEWAY_SERVICE__LISTEN_PORT}
      RABBIT_MQ_ADDRESS: ${RABBIT_MQ_ADDRESS}
      BONUS_SERVICE_ADDRESS: ${BONUS_SERVICE_ADDRESS}
      FLIGHT_SERVICE_ADDRESS: ${FLIGHT_SERVICE_ADDRESS}
      TICKET_SERVICE_ADDRESS: ${TICKET_SERVICE_ADDRESS}
      IDENTITY_SECRET_KEY: ${IDENTITY_SECRET_KEY}
      KAFKA__BOOTSTRAP_SERVERS: ${KAFKA__BOOTSTRAP_SERVERS}
    depends_on:
      kafka:
        condition: service_healthy
      secret-vault:
        condition: service_healthy
    ports:
      - "${GATEWAY_SERVICE__LISTEN_PORT}:8080"
    networks:
      - services-network

  ticket-service:
    build: 
      context: ../
      dockerfile: ./deployment/ticket_service/Dockerfile
    image: squeakbug73/ticket-service:0.4
    restart: unless-stopped
    container_name: ticket-service
    environment:
      TICKET_SERVICE__LISTEN_PORT: ${TICKET_SERVICE__LISTEN_PORT}
      TICKET_SERVICE__DATABASE_URL: ${TICKET_SERVICE__DATABASE_URL}
      IDENTITY_SECRET_KEY: ${IDENTITY_SECRET_KEY}
      KAFKA__BOOTSTRAP_SERVERS: ${KAFKA__BOOTSTRAP_SERVERS}
    ports:
      - "${TICKET_SERVICE__LISTEN_PORT}:8070"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      secret-vault:
        condition: service_healthy
    networks:
      - services-network

  flight-service:
    build: 
      context: ../
      dockerfile: ./deployment/flight_service/Dockerfile
    image: squeakbug73/flight-service:0.5
    restart: unless-stopped
    container_name: flight-service
    environment:
      FLIGHT_SERVICE__LISTEN_PORT: ${FLIGHT_SERVICE__LISTEN_PORT}
      FLIGHT_SERVICE__DATABASE_URL: ${FLIGHT_SERVICE__DATABASE_URL}
      IDENTITY_SECRET_KEY: ${IDENTITY_SECRET_KEY}
      KAFKA__BOOTSTRAP_SERVERS: ${KAFKA__BOOTSTRAP_SERVERS}
    ports:
      - "${FLIGHT_SERVICE__LISTEN_PORT}:8060"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      secret-vault:
        condition: service_healthy
    networks:
      - services-network

  bonus-service:
    build: 
      context: ../
      dockerfile: ./deployment/bonus_service/Dockerfile
    image: squeakbug73/bonus-service:0.4
    restart: unless-stopped
    container_name: bonus-service
    environment:
      BONUS_SERVICE__LISTEN_PORT: ${BONUS_SERVICE__LISTEN_PORT}
      BONUS_SERVICE__DATABASE_URL: ${BONUS_SERVICE__DATABASE_URL}
      IDENTITY_SECRET_KEY: ${IDENTITY_SECRET_KEY}
      KAFKA__BOOTSTRAP_SERVERS: ${KAFKA__BOOTSTRAP_SERVERS}
    ports:
      - "${BONUS_SERVICE__LISTEN_PORT}:8050"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      secret-vault:
        condition: service_healthy
    networks:
      - services-network

  statistics-service:
    build: 
      context: ../
      dockerfile: ./deployment/statistics_service/Dockerfile
    image: squeakbug73/statistics-service:0.2
    restart: unless-stopped
    container_name: statistics-service
    ports:
      - "${STATISTICS_SERVICE__LISTEN_PORT}:8090"
    environment:
      STATISTICS_SERVICE__DATABASE_URL: ${STATISTICS_SERVICE__DATABASE_URL}
      STATISTICS_SERVICE__LISTEN_PORT: ${STATISTICS_SERVICE__LISTEN_PORT}
      KAFKA__BOOTSTRAP_SERVERS: ${KAFKA__BOOTSTRAP_SERVERS}
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      secret-vault:
        condition: service_healthy
    networks:
      - services-network

  postgres:
    image: ${DOCKER_REGISTRY}/library/postgres:16-alpine
    container_name: postgres
    restart: on-failure
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-volume:/var/lib/postgresql/data
      - ./postgres/docker-entrypoint-initdb.d/:/docker-entrypoint-initdb.d/
    ports:
      - "5432:5432"
    networks:
      - services-network
    healthcheck:
      test:
        - "CMD-SHELL"
        - "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: ${DOCKER_REGISTRY}/rabbitmq:3.13.2-management
    restart: always
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_MQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_MQ_DEFAULT_PASS}
    networks:
      - services-network

  kafdrop:
    image: ${DOCKER_REGISTRY}/obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9004:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9093"
      JVM_OPTS: "-Xms32M -Xmx64M"
    depends_on:
      - kafka
    networks:
      - services-network

  zookeeper:
    image: ${DOCKER_REGISTRY}/confluentinc/cp-zookeeper:7.4.6
    healthcheck:
      test: "[[ $$(echo srvr | nc zookeeper 2181 || exit 1) ]]"
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
      - "2182:2182"
    networks:
      - services-network

  kafka:
    image: ${DOCKER_REGISTRY}/confluentinc/cp-kafka:7.4.6
    hostname: kafka
    container_name: kafka
    restart: always
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "8091:8091"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: INSIDE://:9093,OUTSIDE://:9092
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9093,OUTSIDE://:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - services-network

  minio:
    image: ${DOCKER_REGISTRY}/minio/minio
    ports:
      - "9002:9000"
      - "9003:9001"
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    volumes:
      - minio-volume:/data
    command: server --console-address ":9001" /data
    networks:
      - services-network

  redis:
    image: ${DOCKER_REGISTRY}/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis-volume:/data
    networks:
      - services-network

  goauthentik-server:
    image: ghcr.io/goauthentik/server:2024.6.2
    container_name: dscoursework-authentik-server
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgres
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${IDENTITY_SECRET_KEY}
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    ports:
      - "9006:9000"
      - "9443:9443"
    depends_on:
      - postgres
      - redis
    networks:
      - services-network

  goauthentik-worker:
    image: ghcr.io/goauthentik/server:2024.6.2
    container_name: dscoursework-authentik-worker
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgres
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${IDENTITY_SECRET_KEY}
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
    depends_on:
      - postgres
      - redis
    networks:
      - services-network

  whoami:
    image: "traefik/whoami"
    container_name: "simple-service"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.localhost`)"
      - "traefik.http.routers.whoami.entrypoints=web"
    networks:
      - services-network

  secret-vault:
    image: vault:1.13.3
    container_name: secret-vault
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://secret-vault:8200/v1/sys/health?standbyok=true" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 15s
    ports:
      - "8200:8200"
      - "8201:8201"
      - "8125:8125"
    volumes:
      - hashivault-volume:/vault/file:rw
      - ./hashivault:/vault/config:rw
    cap_add:
      - IPC_LOCK
    entrypoint: vault server -config=/vault/config/vault.json
    networks:
      - services-network


networks:
  services-network:
    driver: bridge

volumes:
  postgres-volume: {}
  minio-volume: {}
  redis-volume: {}
  kafka-volume: {}
  hashivault-volume: {}