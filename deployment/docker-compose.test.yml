version: "3"
services:
  postgres:
    image: library/postgres:13
    container_name: postgres
    restart: on-failure
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./init_db:/docker-entrypoint-initdb.d/
    ports:
      - "5432:5432"
    networks:
      - services-network
    healthcheck:
      test:
        - "CMD-SHELL"
        - "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"
      interval: 5s
      timeout: 5s
      retries: 5

  gateway-service:
    build: ./gateway_service
    image: squeakbug73/gateway-service:0.1
    restart: unless-stopped
    container_name: gateway-service
    environment:
      - DB_HOST=postgres
      - LISTEN_ADDRESS=gateway-service:8080
      - BONUS_SERVICE_ADDRESS=http://bonus-service:8050
      - FLIGHT_SERVICE_ADDRESS=http://flight-service:8060
      - TICKET_SERVICE_ADDRESS=http://ticket-service:8070
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - services-network

  rabbitmq:
    image: rabbitmq:3.13.2-management
    restart: always
    ports:
      - 15672:15672
      - 5672:5672
    environment:
      - RABBITMQ_DEFAULT_USER=rmq
      - RABBITMQ_DEFAULT_PASS=rmq
    networks:
      - services-network

  ticket-service:
    build: ./ticket_service
    image: squeakbug73/ticket-service:0.1
    restart: unless-stopped
    container_name: ticket-service
    environment:
      - DB_HOST=postgres
      - LISTEN_ADDRESS=ticket-service:8070
    ports:
      - "8070:8070"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - services-network

  flight-service:
    build: ./flight_service
    image: squeakbug73/flight-service:0.1
    restart: unless-stopped
    container_name: flight-service
    environment:
      - DB_HOST=postgres
      - LISTEN_ADDRESS=flight-service:8060
    ports:
      - "8060:8060"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - services-network

  bonus-service:
    build: ./bonus_service
    image: squeakbug73/bonus-service:0.1
    restart: unless-stopped
    container_name: bonus-service
    environment:
      - DB_HOST=postgres
      - LISTEN_ADDRESS=bonus-service:8050
    ports:
      - "8050:8050"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - services-network

  statistics-service:
    build: statistics_service
    image: squeakbug73/statistics-service:0.1
    restart: unless-stopped
    ports:
      - "8030:8030"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=stat
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - services-network

  identity-provider:
    build: oidc_identity_provider
    image: squeakbug73/identity-provider:0.1
    restart: unless-stopped
    ports:
      - "8020:8020"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=stat
    networks:
      - services-network

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9093"
      JVM_OPTS: "-Xms32M -Xmx64M"
    depends_on:
      - kafka
    networks:
      - services-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    healthcheck:
      test: "[[ $$(echo srvr | nc zookeeper 2181 || exit 1) ]]"
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
      - "2182:2182"
    networks:
      - services-network

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "8091:8091"
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: INSIDE://:9093,OUTSIDE://:9092
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9093,OUTSIDE://:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - services-network

  minio:
    image: mirror.gcr.io/minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    volumes:
      - minio-data:/data
    command: server --console-address ":9001" /data

networks:
  services-network:
    driver: bridge

volumes:
  db-data: {}
  minio-data: {}
